import argparse
import os
import pickle
import random
import string
import subprocess
import time


def run(count: int, batch_time: int, delayed: bool):
    if not os.path.exists("routes"):
        os.makedirs("routes")

    if not os.path.exists("source"):
        os.makedirs("source")

    with open("source/routes.pickle", "rb") as file:
        routes = pickle.load(file)

    for i in range(count):
        id = get_plate_like_str()
        route = random.choice(routes)
        route_file = f"route-{id}.pickle"
        with open(f"routes/{route_file}", "wb") as file:
            pickle.dump(route, file)
        subprocess.run(
            ["python", "tracker.py", "localhost", str(batch_time), id, route_file],
            shell=False, stdin=None, stdout=None, stderr=None,
            close_fds=True
        )
        if delayed:
            time.sleep(random.uniform(0.0, 5.0))


def get_plate_like_str():
    # get random password pf length 8 with letters, digits, and symbols
    characters = string.ascii_letters + string.digits
    plate = "".join(random.choice(characters) for i in range(6))
    return plate


def run_tracker(id, route: list[tuple], batch_time: int, delay: float = 0):
    pass


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="RWK Tracker Coordinator",
        description="Run fake trackers from a routes file, sending messages to the given consumer."
        "Uses a routes.pickle file as generated by the RWK Route Generator",
    )
    parser.add_argument(
        "count",
        type=int,
        help="The number of simultaneous trackers to run.",
    )
    parser.add_argument(
        "batch_time",
        type=int,
        help="Timespan of a single batch of coordinates.",
    )
    parser.add_argument(
        "--delayed",
        type=bool,
        help="Add randomized startup delay between trackers of 0-10 seconds.",
        default=False,
    )
    args = parser.parse_args()

    run(args.count, args.batch_time, args.delayed)
